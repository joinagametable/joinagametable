// <auto-generated />
using System;
using System.Collections.Generic;
using JoinAGameTable.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JoinAGameTable.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("JoinAGameTable.Models.EventModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BannerId");

                    b.Property<DateTimeOffset>("BeginsAt");

                    b.Property<Guid?>("CoverId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("EndsAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OwnerId");

                    b.Property<DateTimeOffset?>("PublicAt");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("CoverId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Id", "OwnerId");

                    b.ToTable("event");
                });

            modelBuilder.Entity("JoinAGameTable.Models.FileMetaDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bucket")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("file_metadata");
                });

            modelBuilder.Entity("JoinAGameTable.Models.GameTableMetaDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("GameTableId");

                    b.Property<int>("Key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameTableId", "Key")
                        .IsUnique();

                    b.ToTable("game_table_metadata");
                });

            modelBuilder.Entity("JoinAGameTable.Models.GameTableModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("BeginAt");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("DurationEstimationHigh");

                    b.Property<int>("DurationEstimationLow");

                    b.Property<Guid>("EventId");

                    b.Property<int>("GameClassificationAge");

                    b.Property<List<int>>("GameClassificationContent")
                        .IsRequired();

                    b.Property<int>("GameType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<int>("NumberOfSeat");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("game_table");
                });

            modelBuilder.Entity("JoinAGameTable.Models.UserAccountModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AvatarId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(125);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("account");
                });

            modelBuilder.Entity("JoinAGameTable.Models.EventModel", b =>
                {
                    b.HasOne("JoinAGameTable.Models.FileMetaDataModel", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId");

                    b.HasOne("JoinAGameTable.Models.FileMetaDataModel", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId");

                    b.HasOne("JoinAGameTable.Models.UserAccountModel", "Owner")
                        .WithMany("Events")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JoinAGameTable.Models.GameTableMetaDataModel", b =>
                {
                    b.HasOne("JoinAGameTable.Models.GameTableModel", "GameTable")
                        .WithMany("MetaData")
                        .HasForeignKey("GameTableId");
                });

            modelBuilder.Entity("JoinAGameTable.Models.GameTableModel", b =>
                {
                    b.HasOne("JoinAGameTable.Models.EventModel", "Event")
                        .WithMany("GameTables")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JoinAGameTable.Models.UserAccountModel", b =>
                {
                    b.HasOne("JoinAGameTable.Models.FileMetaDataModel", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");
                });
#pragma warning restore 612, 618
        }
    }
}
